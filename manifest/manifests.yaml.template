apiVersion: v1
data:
  GMAPS_API_KEY: $gmapsapikey
  JWT_SECRET: $jwtsecret
kind: Secret
metadata:
  name: api
  namespace: $namespace
type: Opaque

---

apiVersion: v1
data:
  DB_DATABASE: $dbdatabase
  DB_HOST: $dbhost
  DB_PASSWORD: $dbpassword
  DB_USERNAME: $dbusername
  REDIS_HOST: $redishost
kind: Secret
metadata:
  name: db
  namespace: $namespace
type: Opaque

---

apiVersion: v1
data:
  redis-password: $redispassword
kind: Secret
metadata:
  name: redis-secret
  namespace: $namespace
type: Opaque


---


apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "3"
  name: api
  namespace: $namespace
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: api
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: api
    spec:
      automountServiceAccountToken: true
      containers:
        - args:
            - start:prod
          env:
            - name: PORT
              value: "3000"
            - name: JWT_EXPIRES_IN
              value: 2h
            - name: DISTRIBUTED_MAP
              value: "true"
            - name: REQUIRE_USER_AUTH
              value: "true"
            - name: REQUIRE_USER_ACCOUNT_ACTIVATION
              value: "true"
            - name: USE_NEW_METHODOLOGY
              value: "true"
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  key: DB_HOST
                  name: db
                  optional: false
                  optional: false
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: DB_USERNAME
                  name: db
                  optional: false
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: DB_PASSWORD
                  name: db
                  optional: false
            - name: DB_DATABASE
              valueFrom:
                secretKeyRef:
                  key: DB_DATABASE
                  name: db
                  optional: false
            - name: QUEUE_HOST
              valueFrom:
                secretKeyRef:
                  key: REDIS_HOST
                  name: db
                  optional: false
            - name: GEOCODING_CACHE_HOST
              valueFrom:
                secretKeyRef:
                  key: REDIS_HOST
                  name: db
                  optional: false
            - name: DB_CACHE_HOST
              valueFrom:
                secretKeyRef:
                  key: REDIS_HOST
                  name: db
                  optional: false
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  key: JWT_SECRET
                  name: api
                  optional: false
            - name: GMAPS_API_KEY
              valueFrom:
                secretKeyRef:
                  key: GMAPS_API_KEY
                  name: api
                  optional: false
          image: europe-west1-docker.pkg.dev/landgriffon/landgriffon-marketplace/api:1.0.0
          imagePullPolicy: Always
          name: api
          resources:
            limits:
              cpu: "0.5"
              memory: 1Gi
            requests:
              cpu: "0.5"
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      imagePullSecrets:
        - name: regcred
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      shareProcessNamespace: false
      terminationGracePeriodSeconds: 30







---


apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "3"
  name: client
  namespace: $namespace
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: client
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: client
    spec:
      automountServiceAccountToken: true
      containers:
        - args:
            - start:prod
          image: europe-west1-docker.pkg.dev/landgriffon/landgriffon-marketplace/client:1.0.0
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 5
          name: client
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "0.5"
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      imagePullSecrets:
        - name: regcred
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      shareProcessNamespace: false
      terminationGracePeriodSeconds: 30



---

apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: $namespace
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    name: api
  sessionAffinity: None
  type: NodePort



---

apiVersion: v1
kind: Service
metadata:
  annotations:
    alb.ingress.kubernetes.io/healthcheck-path: /auth/signin
  name: client
  namespace: $namespace
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    name: client
  sessionAffinity: None
  type: NodePort


---



apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: $namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 40Gi
  storageClassName: "standard-rwo"

---

apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: $namespace
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: $namespace
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: europe-west1-docker.pkg.dev/landgriffon/landgriffon-marketplace/landgriffon-postgres:1.0.0
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: db
                  key: DB_USERNAME
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db
                  key: DB_PASSWORD
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db
                  key: DB_PASSWORD
            - name: POSTGRES_DB
              valueFrom:                    
                secretKeyRef:
                  name: db
                  key: DB_DATABASE
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
              name: postgres
          volumeMounts:
            - name: postgres-pv-claim
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
    - metadata:
        name: postgres-pv-claim
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 40Gi
        storageClassName: "standard-rwo"


---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: $namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
  storageClassName: "standard-rwo"

---

apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: $namespace
  labels:
    app: redis
spec:
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: redis
  clusterIP: None

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: $namespace
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:6.2
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secret
                  key: redis-password
                  optional: false
          ports:
            - containerPort: 6379
              name: redis
          volumeMounts:
            - name: redis-data
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 4Gi
        storageClassName: "standard-rwo"



